import logging

from aiogram import Router, types, F

from keyboards.keyboards import registered_kb, get_stats_main_kb, get_blood_stats_kb


router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def show_stats_menu(message: types.Message):
    try:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=get_stats_main_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data == 'stats_back')
async def back_to_main(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=registered_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == 'blood_stats')
async def show_blood_menu(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞—Ö–∞—Ä–∞:",
            reply_markup=get_blood_stats_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞—Ö–∞—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == 'blood_back')
async def back_to_stats(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=get_stats_main_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

def format_blood_message(stats, period_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if not stats:
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period_name}"
    
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞—Ö–∞—Ä–∞ –∑–∞ {period_name}:\n\n"
    message += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {stats.get('avg', 0):.1f} –º–º–æ–ª—å/–ª\n"
    message += f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {stats.get('min', 0):.1f} –º–º–æ–ª—å/–ª\n"
    message += f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {stats.get('max', 0):.1f} –º–º–æ–ª—å/–ª\n"
    message += f"‚Ä¢ –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {stats.get('count', 0)}\n"

    if 'records' in stats:
        message += "\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:\n"
        for record in stats['records']:
            message += f"‚Üí {record['time']} - {record['value']:.1f} –º–º–æ–ª—å/–ª\n"
    
    return message