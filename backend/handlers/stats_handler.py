import logging

from aiogram import Router, types, F
from tabulate import tabulate
from handlers.blood_stats import escape_markdown_v2

from keyboards.keyboards import registered_kb, get_stats_main_kb, get_blood_stats_kb


router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def show_stats_menu(message: types.Message):
    try:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=get_stats_main_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data == 'stats_back')
async def back_to_main(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=registered_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == 'blood_stats')
async def show_blood_menu(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞—Ö–∞—Ä–∞:",
            reply_markup=get_blood_stats_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞—Ö–∞—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == 'blood_back')
async def back_to_stats(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=get_stats_main_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

def format_blood_message(records, period_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å–∞—Ö–∞—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ ‚Äî –¥–∞—Ç–∞, –≤—Ä–µ–º—è, —Ç–∏–ø, –∑–Ω–∞—á–µ–Ω–∏–µ"""
    if not records:
        return f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {escape_markdown_v2(period_name)}"

    message = f"üìÖ \\*–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–∞—Ö–∞—Ä–∞ –∑–∞ {escape_markdown_v2(period_name)}\\*:\n\n"

    table_data = []
    for r in records:
        date_str = r['date'].strftime("%d.%m.%Y")
        time_str = r['date'].strftime("%H:%M")
        table_data.append([
            escape_markdown_v2(date_str),
            escape_markdown_v2(time_str),
            escape_markdown_v2(r['type']),
            f"{r['value']:.1f}"
        ])

    headers = ["–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–¢–∏–ø –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞", "–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞"]
    table = tabulate(table_data, headers=headers, tablefmt="grid")

    message += f"```{table}```"
    return message