import logging

from aiogram import Router, types, F
from aiogram.filters import Command
from database.create import SessionLocal

from database.models.user import User
from keyboards.keyboards import registered_kb, unregistered_kb

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    with SessionLocal() as session:
        user = session.query(User).filter(
            User.tg_id == message.from_user.id
        ).first()

        if user:
            await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.username or '–¥—Ä—É–≥'}!",
                reply_markup=registered_kb
            )
        else:
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=unregistered_kb
            )


@router.message(Command("help"))
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_handler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    try:
        with SessionLocal() as session:
            user = session.query(User).filter(
                User.tg_id == message.from_user.id
            ).first()

            help_text = (
                "‚ùì *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
                "–Ø –ø–æ–º–æ–≥—É –í–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –∏ –í–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ!"
                " –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            )

            if user:
                # –¢–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                help_text += (
                    "‚è± –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä - –Ω–∞—á–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏\n"
                    "üìä –í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–∞—Ö–∞—Ä–∞"
                    " –∏–ª–∏ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –µ–¥–µ\n"
                    "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n"
                    "‚ÑπÔ∏è –û –Ω–∞—Å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
                )
                await message.answer(help_text, reply_markup=registered_kb)
            else:
                # –¢–µ–∫—Å—Ç –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                help_text += (
                    "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!"
                )
                await message.answer(help_text, reply_markup=unregistered_kb)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ help_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=unregistered_kb
        )
