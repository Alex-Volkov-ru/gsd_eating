import logging
import re

from datetime import datetime
from aiogram import Router, types, F
from tabulate import tabulate
from sqlalchemy.orm import Session

from database.db_operations import get_daily_blood_stats
from database.create import get_db
from database.models.user import User
from keyboards.keyboards import get_blood_stats_kb

router = Router()
logger = logging.getLogger(__name__)


def get_user_from_db(db: Session, tg_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return db.query(User).filter(User.tg_id == tg_id).first()


def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã MarkdownV2"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(r'([{}])'.format(re.escape(escape_chars)), r'\\\1', text)


@router.callback_query(F.data == 'blood_day')
async def show_daily_blood_stats(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–∞—Ö–∞—Ä –∑–∞ –¥–µ–Ω—å'"""
    try:
        db = next(get_db())
        user = get_user_from_db(db, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        records = get_daily_blood_stats(user.id, db)
        
        if not records:
            await callback.message.edit_text(
                "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∞—Ö–∞—Ä–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
                reply_markup=get_blood_stats_kb()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        table_data = []
        for record in records:
            time_str = record.date_time.strftime('%H:%M')
            glucose_str = f"{record.glucose:.1f} –º–º–æ–ª—å/–ª"
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
            table_data.append([
                escape_markdown_v2(time_str),
                escape_markdown_v2(record.type_name),
                glucose_str  # –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
            ])

        headers = ["–í—Ä–µ–º—è", "–¢–∏–ø –∏–∑–º–µ—Ä–µ–Ω–∏—è", "–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞"]
        table = tabulate(table_data, headers, tablefmt="simple_grid")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown –≤ —Ç–∞–±–ª–∏—Ü–µ
        message = f"üìä –ò–∑–º–µ—Ä–µ–Ω–∏—è —Å–∞—Ö–∞—Ä–∞ –∑–∞ {datetime.now().strftime('%d.%m.%Y')}:\n"
        message += f"<pre>{table}</pre>"

        await callback.message.edit_text(
            text=message,
            reply_markup=get_blood_stats_kb(),
            parse_mode="HTML"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞—Ö–∞—Ä–∞: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            show_alert=True
        )
    finally:
        db.close()