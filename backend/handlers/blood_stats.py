import logging
import re

from datetime import datetime
from aiogram import Router, types, F
from tabulate import tabulate
from sqlalchemy.orm import Session

from database.db_operations import get_daily_blood_stats
from database.create import get_db
from database.models.user import User
from keyboards.keyboards import get_blood_stats_kb
from database.db_operations import get_weekly_blood_stats, get_monthly_blood_stats

router = Router()
logger = logging.getLogger(__name__)


def get_user_from_db(db: Session, tg_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return db.query(User).filter(User.tg_id == tg_id).first()


def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã MarkdownV2"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(r'([{}])'.format(re.escape(escape_chars)), r'\\\1', text)


@router.callback_query(F.data == 'blood_day')
async def show_daily_blood_stats(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–∞—Ö–∞—Ä –∑–∞ –¥–µ–Ω—å'"""
    try:
        db = next(get_db())
        user = get_user_from_db(db, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        records = get_daily_blood_stats(user.id, db)
        
        if not records:
            await callback.message.edit_text(
                "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∞—Ö–∞—Ä–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
                reply_markup=get_blood_stats_kb()
            )
            return
        if callback.from_user.is_bot:
            table_data = [
                [
                    record.date_time.strftime('%H:%M'),
                    record.type_name[:10],
                    f"{record.glucose:.1f}"
                ]
                for record in records
            ]
            headers = ["–í—Ä–µ–º—è", "–¢–∏–ø", "–°–∞—Ö–∞—Ä"]
            table_fmt = "simple_grid"
        else:
            table_data = [
                [
                    record.date_time.strftime('%H:%M'),
                    record.type_name,
                    f"{record.glucose:.1f} –º–º–æ–ª—å/–ª"
                ]
                for record in records
            ]
            headers = ["–í—Ä–µ–º—è", "–¢–∏–ø –∏–∑–º–µ—Ä–µ–Ω–∏—è", "–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞"]
            table_fmt = "fancy_grid"

        table = tabulate(
            table_data,
            headers=headers,
            tablefmt=table_fmt,
            stralign="center",
            numalign="center"
        )
        message = f"üìä <b>–ò–∑–º–µ—Ä–µ–Ω–∏—è —Å–∞—Ö–∞—Ä–∞ –∑–∞ {datetime.now().strftime('%d.%m.%Y')}</b>\n"
        message += f"<pre>{table}</pre>"

        await callback.message.edit_text(
            text=message,
            reply_markup=get_blood_stats_kb(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞", show_alert=True)
    finally:
        db.close()

@router.callback_query(F.data == 'blood_week')
async def show_weekly_blood_stats(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–∞—Ö–∞—Ä –∑–∞ –Ω–µ–¥–µ–ª—é'"""
    try:
        db = next(get_db())
        user = get_user_from_db(db, callback.from_user.id)

        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        records = get_weekly_blood_stats(user.id, db)

        if not records:
            await callback.message.edit_text(
                "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∞—Ö–∞—Ä–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é",
                reply_markup=get_blood_stats_kb()
            )
            return

        table_data = [
            [
                record.date_time.strftime('%d.%m %H:%M'),
                record.type_name,
                f"{record.glucose:.1f} –º–º–æ–ª—å/–ª"
            ]
            for record in records
        ]
        headers = ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–¢–∏–ø –∏–∑–º–µ—Ä–µ–Ω–∏—è", "–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞"]

        table = tabulate(
            table_data,
            headers=headers,
            tablefmt="fancy_grid",
            stralign="center",
            numalign="center"
        )

        message = f"üìä <b>–ò–∑–º–µ—Ä–µ–Ω–∏—è —Å–∞—Ö–∞—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é</b>\n"
        message += f"<pre>{table}</pre>"

        await callback.message.edit_text(
            text=message,
            reply_markup=get_blood_stats_kb(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞", show_alert=True)
    finally:
        db.close()

@router.callback_query(F.data == 'blood_month')
async def show_monthly_blood_stats(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–∞—Ö–∞—Ä –∑–∞ –º–µ—Å—è—Ü' —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –Ω–µ–¥–µ–ª—è–º –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü"""
    try:
        db = next(get_db())
        user = get_user_from_db(db, callback.from_user.id)

        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        records = get_monthly_blood_stats(user.id, db)

        if not records:
            await callback.message.edit_text(
                "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∞—Ö–∞—Ä–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
                reply_markup=get_blood_stats_kb()
            )
            return

        from collections import defaultdict

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º –≤ –º–µ—Å—è—Ü–µ
        weeks = defaultdict(list)
        for r in records:
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–¥–µ–ª—é –º–µ—Å—è—Ü–∞
            week_num = (r.date_time.day - 1) // 7 + 1  # –¥–µ–ª–∏–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –Ω–∞ –Ω–µ–¥–µ–ª–∏
            weeks[week_num].append(r)

        message = "<b>üìä –ò–∑–º–µ—Ä–µ–Ω–∏—è —Å–∞—Ö–∞—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</b>\n\n"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        for week_num, week_records in sorted(weeks.items()):
            message += f"<b>üóì –ù–µ–¥–µ–ª—è {week_num}</b>\n"

            table_data = [
                [
                    r.date_time.strftime('%d.%m %H:%M'),
                    r.type_name,
                    f"{r.glucose:.1f} –º–º–æ–ª—å/–ª"
                ]
                for r in week_records
            ]
            headers = ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–¢–∏–ø –∏–∑–º–µ—Ä–µ–Ω–∏—è", "–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞"]

            table = tabulate(
                table_data,
                headers=headers,
                tablefmt="fancy_grid",
                stralign="center",
                numalign="center"
            )

            message += f"<pre>{table}</pre>\n"

        await callback.message.edit_text(
            text=message.strip(),
            reply_markup=get_blood_stats_kb(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞", show_alert=True)
    finally:
        db.close()

